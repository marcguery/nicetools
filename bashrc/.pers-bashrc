############################################################GENERAL#############################################################

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
###############################################################################################################################

############################################################COLORS#############################################################
# lists all colors used
     PURPLE="\[\033[0;35m\]"
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[0;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[0;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"
      BLACK="\[\033[0;30m\]"
       CYAN="\[\033[01;36m\]"
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -CF --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'    
fi
    
# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
export LESS='-R'
export LESSOPEN='|~/.lessfilter %s'
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
##########################################################################################################################

##############################################################PROMPT###########################################################

function parse_git_branch {
  git_symbol="―Ξ"
  git_status="$(git status 2> /dev/null)"
  branch="$(git branch | grep \* | cut -d '*' -f2 | cut -c 2-)"
  
  if [[ $(git status 2> /dev/null | grep -c :) == 0 ]]; then
    state="💧"
  else
    state="🔥"
  fi
  # add an else if or two here if you want to get more specific
  if [[ ${git_status} == *"Votre branche est en avance"* || ${git_status} == *"Your branch is ahead"* ]]; then
    remote="↑"
  elif [[ ${git_status} == *"Votre branche est en retard"* || ${git_status} == *"Your branch is behind"* ]]; then
    remote="↓"
  elif [[ ${git_status} == *"Votre branche est à jour"* || ${git_status} == *"Your branch is up-to-date"* ]]; then
    remote="↑↓"
  else
    remote="⤫"  
  fi
  if [[ ${branch} == *"détachée"* || ${branch} == *"detached"* ]]; then
    branch="―+―>"
  fi
  echo "${BLUE}${git_symbol} |${branch}| ${remote} ${state}${COLOR_NONE}"
}

function prompt_func() {
    previous_return_value=$?;
    if test $previous_return_value -eq 0
    then
        PS1_UP="${debian_chroot:+($debian_chroot)}${YELLOW}(╮^_^)╮${BLACK} ┳━┳ ${YELLOW}('⌣' )${COLOR_NONE}"
        COLOR_CMD=$COLOR_NONE
    else
        PS1_UP="${debian_chroot:+($debian_chroot)}${YELLOW}(╯°□ °）╯\[\033[05;37m\]︵ ${BLACK}┻━┻ ${COLOR_NONE}${YELLOW}\( °Δ°)/${COLOR_NONE}"
        COLOR_CMD=$RED
    fi
    location=$(git rev-parse --is-inside-work-tree 2> /dev/null)
    if [[ $location == "true" ]]; then
        PS1=${PS1_UP}" "$(parse_git_branch)"\n${GREEN}[\D{%T}]${CYAN}\w$\n${COLOR_CMD}>${COLOR_NONE} "
    else
        PS1=${PS1_UP}"\n${GREEN}[\D{%T}]${CYAN}\w$\n${COLOR_CMD}>${COLOR_NONE} "
    fi
}

export PROMPT_COMMAND=prompt_func

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ ${color_prompt} != yes ]; then
    #PS1_UP="${debian_chroot:+($debian_chroot)}\[${YELLOW}\]( う-´)づ\[${BLACK}\]︻\[${WHITE}\]╦̵̵̿╤\[${BLACK}\]── \[\033[05;37m\]─\[${NC}\] \[${YELLOW}\]\(˚~˚”)/\[${NC}\]"
    #PS1=${PS1_UP}"\n\[${GREEN}\][--:--:--]\[${CYAN}\]\w\$\[${NC}\] "
    #PS1_UP='${debian_chroot:+($debian_chroot)}( う-´)づ︻╦̵̵̿╤──  \(˚~˚”)/:\w\$ '
    PS1='${debian_chroot:+($debian_chroot)}\w\$> '
    PROMPT_COMMAND=""
    
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac
################################################################################################################################

#############################################################ALIASES#############################################################
# aliases that don't have a notifier version
alias cpro='rsync -a --info=progress2'
alias mvro='rsync -a --info=progress2 --remove-source-files'
alias rm='read -p "Tersain ?" && rm'
alias ll='ls -lFh'
alias lla='ls -alFh'
alias la='ls -AF --format=single-column'
alias lsa='ls -AF'
alias l='ls -CF --format=single-column'
OLDPWD=$(pwd)
alias p='cd -'
alias g='gnome-terminal'
alias setw='w=$(pwd)'
alias w='cd $w'
alias rc='source ~/.bashrc'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
	
###########################################################################################################################

################################################ENABLE COMPLETION/PAD###############################################

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#############################################################################################################################

###################################################################PATH########################################################

###############################################################################################################################